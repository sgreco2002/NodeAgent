{
  "name": "jdbc",
  "version": "0.2.2",
  "description": "Node Module JDBC wrapper",
  "main": "index.js",
  "dependencies": {
    "async": "~1.5",
    "java": "~0.6",
    "lodash": "~3.1",
    "node-uuid": "~1.4",
    "winston": "^2.2.0"
  },
  "devDependencies": {
    "jshint": "~2.9",
    "nodeunit": "~0.9"
  },
  "scripts": {
    "pretest": "bash bin/startdbs",
    "test": "nodeunit test",
    "posttest": "bash bin/stopdbs",
    "lint": "jshint lib/**.js test/**.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/CraZySacX/node-jdbc.git"
  },
  "directories": {
    "doc": ".",
    "lib": "lib"
  },
  "keywords": [
    "node",
    "jdbc",
    "wrapper"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "author": {
    "name": "Jason Ozias",
    "email": "jason.g.ozias@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# node-jdbc\nJDBC API Wrapper for node.js\n\n## Latest Version\n- **0.2.2** - Before upgrading, read the [Major API Refactor](#major-api-refactor)\nsection.  This is NOT backwards compatible with the old API.\n- 0.0.15 - Old API.\n\n## Installation\n```npm install jdbc```\n\nPlease visit [node-jdbc](https://www.npmjs.org/package/jdbc) for information on installing with npm.\n\n## Status\n[![Build Status](https://travis-ci.org/CraZySacX/node-jdbc.svg?branch=0.2.2)](https://travis-ci.org/CraZySacX/node-jdbc)\n\n## Dependencies\n- [async](https://github.com/caolan/async)\n- [node-java](https://github.com/joeferner/node-java)\n- [node-uuid](https://github.com/broofa/node-uuid)\n- [lodash](https://github.com/lodash/lodash)\n\n## Supported Java Versions\n- 1.7\n- 1.8\n\n[node-java](https://github.com/joeferner/node-java) has experiemental support for 1.8, and if you are brave you can\ncompile it with such.  All the tests work out of the box on a 1.8 JVM, but I've only wrapped 1.7 functions.\n\n## Major API Refactor\n- **One Instance to Rule Them All (JVM)**\n<p>[node-java](https://github.com/joeferner/node-java) spins up one JVM instance only.  Due to this fact, any JVM options\nand classpath setup have to happen before the first java call.  I've created a\nsmall wrapper (jinst.js) to help out with this.  See below for example\nusage.  I usually add this to every file that may be an entry point.  The\n[unit tests](https://github.com/CraZySacX/node-jdbc/tree/0.2.2/test)\nare setup like this due to the fact that order can't be guaranteed.</p>\n\n```javascript\nvar jinst = require('jdbc/lib/jinst');\n\n// isJvmCreated will be true after the first java call.  When this happens, the\n// options and classpath cannot be adjusted.\nif (!jinst.isJvmCreated()) {\n  // Add all java options required by your project here.  You get one chance to\n  // setup the options before the first java call.\n  jinst.addOption(\"-Xrs\");\n  // Add all jar files required by your project here.  You get one chance to\n  // setup the classpath before the first java call.\n  jinst.setupClasspath(['./drivers/hsqldb.jar',\n                        './drivers/derby.jar',\n                        './drivers/derbyclient.jar',\n                        './drivers/derbytools.jar']);\n}\n```\n\n- **Connection Pooling**\n<p>Everyone gets a pool now.  By default with no extra configuration, the pool\nis created with one connection that can be reserved/released.  Currently, the\npool is configured with two options: *minpoolsize* and *maxpoolsize*.  If\n*minpoolsize* is set, when the pool is initizlized, *minpoolsize* connections\nwill be created.  If *maxpoolsize* is set (the default value is *minpoolsize*),\nand you try and reserve a connection and there aren't any available, the pool\nwill be grown.  This can happen until *maxpoolsize* connections have been\nreserved.  The pool should be initialized after configuration is set with the\n*initialize()* function.  JDBC connections can then be acquired with the\n*reserve()* function and returned to the pool with the *release()* function.\nBelow is the unit test for the pool that demonstrates this behavior.</p>\n\n```javascript\nvar _ = require('lodash');\nvar nodeunit = require('nodeunit');\nvar jinst = require('../lib/jinst');\nvar Pool = require('../lib/pool');\n\nif (!jinst.isJvmCreated()) {\n  jinst.addOption(\"-Xrs\");\n  jinst.setupClasspath(['./drivers/hsqldb.jar',\n                        './drivers/derby.jar',\n                        './drivers/derbyclient.jar',\n                        './drivers/derbytools.jar']);\n}\n\nvar config = {\n  url: 'jdbc:hsqldb:hsql://localhost/xdb',\n  user : 'SA',\n  password: '',\n  minpoolsize: 2,\n  maxpoolsize: 3\n};\n\nvar testpool = null;\nvar testconn = null;\n\nmodule.exports = {\n  setUp: function(callback) {\n    if (testpool === null) {\n      testpool = new Pool(config);\n    }\n    callback();\n  },\n  testinitialize: function(test) {\n    // Initialize the pool (create minpoolsize connections)\n    testpool.initialize(function(err) {\n      test.expect(1);\n      test.equal(null, err);\n      test.done();\n    });\n  },\n  testreserve: function(test) {\n    // Reserve a connection.\n    testpool.reserve(function(err, conn) {\n      test.expect(4);\n      test.equal(null, err);\n      test.ok(conn && typeof conn == 'object');\n      test.equal(testpool._pool.length, 1);\n      test.equal(testpool._reserved.length, 1);\n      testconn = conn;\n      test.done();\n    });\n  },\n  testrelease: function(test) {\n    // Release a connection.\n    testpool.release(testconn, function(err, conn) {\n      test.expect(3);\n      test.equal(null, err);\n      test.equal(testpool._pool.length, 2);\n      test.equal(testpool._reserved.length, 0);\n      testconn = null;\n      test.done();\n    });\n  },\n  testreserverelease: function(test) {\n    // Reserve then release a connection.\n    testpool.reserve(function(err, conn) {\n      if (err) {\n        console.log(err);\n      } else {\n        testpool.release(conn, function(err) {\n          test.expect(3);\n          test.equal(null, err);\n          test.equal(testpool._pool.length, 2);\n          test.equal(testpool._reserved.length, 0);\n          test.done();\n        });\n      }\n    });\n  },\n  testreservepastmin: function(test) {\n    // Reserve connections past minpoolsize.  This will grow the pool.\n    var conns = [];\n    for(i = 0; i < 3; i++) {\n      testpool.reserve(function(err, conn) {\n        conns.push(conn);\n        if (i == 3) {\n          test.expect(2);\n          test.equal(testpool._pool.length, 0);\n          test.equal(testpool._reserved.length, 3);\n          _.each(conns, function(conn) {\n            testpool.release(conn, function(err) {});\n          });\n          test.done();\n        }\n      });\n    }\n  },\n  testovermax: function(test) {\n    // Reserve connections past maxpoolsize.  This will max out the pool, and\n    // throw an error when the last reserve request is made.\n    var conns = [];\n    for(i = 0; i < 4; i++) {\n      testpool.reserve(function(err, conn) {\n        if (err) {\n          if (i == 3) {\n            test.expect(3);\n            test.ok(err);\n            test.equal(testpool._reserved.length, 3);\n            test.equal(testpool._pool.length, 0);\n            _.each(conns, function(conn) {\n              testpool.release(conn, function(err) {});\n            });\n            test.done();\n          } else {\n            console.log(err);\n          }\n        } else {\n          conns.push(conn);\n        }\n      });\n    }\n  }\n};\n```\n\n- **Fully Wrapped Connection API**\n<p>The Java Connection API has almost been completely wrapped.  See\n[connection.js](https://github.com/CraZySacX/node-jdbc/blob/0.2.2/lib/connection.js)\nfor a full list of functions.</p>\n\n```javascript\nconn.setAutoCommit(false, function(err) {\n  if (err) {\n    callback(err);\n  } else {\n    callback(null);\n  }\n});\n```\n\n- **ResultSet processing separated from statement execution**\n<p>ResultSet processing has been separated from statement execution to allow for\nmore flexibility.  The ResultSet returned from executing a select query can\nstill be processed into an object array using the *toObjArray()* function on the\nresultset object.</p>\n\n```javascript\n// Select statement example.\nconn.createStatement(function(err, statement) {\n  if (err) {\n    callback(err);\n  } else {\n    statement.executeQuery(\"SELECT * FROM blah;\", function(err, resultset) {\n      if (err) {\n        callback(err)\n      } else {\n        // Convert the result set to an object array.\n        resultset.toObjArray(function(err, results) {\n          if (results.length > 0) {\n            console.log(\"ID: \" + results[0].ID);\n          }\n          callback(null, resultset);\n        });\n      }\n    });\n  }\n});\n```\n\n## Usage\nSome mininal examples are given below.  I've also created a\n[node-example-jdbc](https://github.com/CraZySacX/node-jdbc-example) project with more thorough examples.\n\n### Initialize\n```javascript\nvar JDBC = require('jdbc');\nvar jinst = require('jdbc/lib/jinst');\n\nif (!jinst.isJvmCreated()) {\n  jinst.addOption(\"-Xrs\");\n  jinst.setupClasspath(['./drivers/hsqldb.jar',\n                        './drivers/derby.jar',\n                        './drivers/derbyclient.jar',\n                        './drivers/derbytools.jar']);\n}\n\nvar config = {\n  // Required\n  url: 'jdbc:hsqldb:hsql://localhost/xdb',\n\n  // Optional\n  drivername: 'my.jdbc.DriverName',\n  minpoolsize: 10,\n  maxpoolsize: 100,\n\n  // Note that if you sepecify the user and password as below, they get\n  // converted to properties and submitted to getConnection that way.  That\n  // means that if your driver doesn't support the 'user' and 'password'\n  // properties this will not work.  You will have to supply the appropriate\n  // values in the properties object instead.\n  user: 'SA',\n  password: '',\n  properties: {}\n};\n\n// or user/password in url\n// var config = {\n//   // Required\n//   url: 'jdbc:hsqldb:hsql://localhost/xdb;user=SA;password=',\n//\n//   // Optional\n//   drivername: 'my.jdbc.DriverName',\n//   minpoolsize: 10\n//   maxpoolsize: 100,\n//   properties: {}\n// };\n\n// or user/password in properties\n// var config = {\n//   // Required\n//   url: 'jdbc:hsqldb:hsql://localhost/xdb',\n//\n//   // Optional\n//   drivername: 'my.jdbc.DriverName',\n//   minpoolsize: 10,\n//   maxpoolsize: 100,\n//   properties: {\n//     user: 'SA',\n//     password: ''\n//     // Other driver supported properties can be added here as well.\n//   }\n// };\n\nvar hsqldb = new JDBC(config);\n\nhsqldb.initialize(function(err) {\n  if (err) {\n    console.log(err);\n  }\n});\n```\n\n### Reserve Connection, Execute Queries, Release Connection\n```javascript\n// This assumes initialization as above.\n// For series execution.\nvar asyncjs = require('async');\n\nhsqldb.reserve(function(err, connObj) {\n  // The connection returned from the pool is an object with two fields\n  // {uuid: <uuid>, conn: <Connection>}\n  if (connObj) {\n    console.log(\"Using connection: \" + connObj.uuid);\n    // Grab the Connection for use.\n    var conn = connObj.conn;\n\n    // Adjust some connection options.  See connection.js for a full set of\n    // supported methods.\n    asyncjs.series([\n      function(callback) {\n        conn.setAutoCommit(false, function(err) {\n          if (err) {\n            callback(err);\n          } else {\n            callback(null);\n          }\n        });\n      },\n      function(callback) {\n        conn.setSchema(\"test\", function(err) {\n          if (err) {\n            callback(err);\n          } else {\n            callback(null);\n          }\n        });\n      }\n    ], function(err, results) {\n      // Check for errors if need be.\n      // results is an array.\n    });\n\n    // Query the database.\n    asyncjs.series([\n      function(callback) {\n        // CREATE SQL.\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            statement.executeUpdate(\"CREATE TABLE blah \"\n                                  + \"(id int, name varchar(10), date DATE, \"\n                                  + \" time TIME, timestamp TIMESTAMP);\",\n                                  function(err, count) {\n              if (err) {\n                callback(err);\n              } else {\n                callback(null, count);\n              }\n            });\n          }\n        });\n      },\n      function(callback) {\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            statement.executeUpdate(\"INSERT INTO blah \"\n                                  + \"VALUES (1, 'Jason', CURRENT_DATE, \"\n                                  + \"CURRENT_TIME, CURRENT_TIMESTAMP);\",\n                                  function(err, count) {\n              if (err) {\n                callback(err);\n              } else {\n                callback(null, count);\n              }\n            });\n          }\n        });\n      },\n      function(callback) {\n        // Update statement.\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            statement.executeUpdate(\"UPDATE blah \"\n                                  + \"SET id = 2 \"\n                                  + \"WHERE name = 'Jason';\",\n                                  function(err, count) {\n              if (err) {\n                callback(err);\n              } else {\n                callback(null, count);\n              }\n            });\n          }\n        });\n      },\n      function(callback) {\n        // Select statement example.\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            // Adjust some statement options before use.  See statement.js for\n            // a full listing of supported options.\n            statement.setFetchSize(100, function(err) {\n              if (err) {\n                callback(err);\n              } else {\n                statement.executeQuery(\"SELECT * FROM blah;\",\n                                       function(err, resultset) {\n                  if (err) {\n                    callback(err)\n                  } else {\n                    resultset.toObjArray(function(err, results) {\n                      if (results.length > 0) {\n                        console.log(\"ID: \" + results[0].ID);\n                      }\n                      callback(null, resultset);\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      },\n      function(callback) {\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            statement.executeUpdate(\"DELETE FROM blah \"\n                                  + \"WHERE id = 2;\", function(err, count) {\n              if (err) {\n                callback(err);\n              } else {\n                callback(null, count);\n              }\n            });\n          }\n        });\n      },\n      function(callback) {\n        conn.createStatement(function(err, statement) {\n          if (err) {\n            callback(err);\n          } else {\n            statement.executeUpdate(\"DROP TABLE blah;\", function(err, count) {\n              if (err) {\n                callback(err);\n              } else {\n                callback(null, count);\n              }\n            });\n          }\n        });\n      }\n    ], function(err, results) {\n      // Results can also be processed here.\n      // Release the connection back to the pool.\n      hsqldb.release(connObj, function(err) {\n        if (err) {\n          console.log(err.message);\n        }\n      });\n    });\n  }\n});\n```\n",
  "bugs": {
    "url": "https://github.com/CraZySacX/node-jdbc/issues"
  },
  "_id": "jdbc@0.2.2",
  "dist": {
    "shasum": "60defe1cea4a8991f2cb6408693fb20cbc8fecc6"
  },
  "_from": "jdbc@",
  "_resolved": "https://registry.npmjs.org/jdbc/-/jdbc-0.2.2.tgz"
}
