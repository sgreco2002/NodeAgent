{
  "name": "inspector",
  "description": "Node.js binding for WebKit Inspector API",
  "version": "0.5.0",
  "author": {
    "name": "Admazely",
    "email": "dev@admaze.ly"
  },
  "maintainers": [
    {
      "name": "AndreasMadsen",
      "email": "andreas@admaze.ly"
    }
  ],
  "main": "./inspector.js",
  "scripts": {
    "test": "tap ./test/simple",
    "generate": "node build/download && node build/generate"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Admazely/inspector.git"
  },
  "keywords": [
    "WebKit",
    "inspector",
    "Chrome",
    "Safari",
    "binding"
  ],
  "dependencies": {
    "ws": "0.7.x",
    "endpoint": "0.4.x"
  },
  "devDependencies": {
    "tap": "0.7.x",
    "temp": "0.8.x",
    "async": "0.9.x",
    "rimraf": "2.3.x"
  },
  "license": "MIT",
  "readme": "# Inspector\n[![npm](http://img.shields.io/npm/v/inspector.svg?style=flat-square)](https://npmjs.com/inspector)\n[![npm downloads](http://img.shields.io/npm/dm/inspector.svg?style=flat-square)](https://npmjs.com/inspector)\n\n> Node.js binding for WebKit Inspector API\n\n## Example\n\n```JavaScript\nvar inspector = require('inspector');\n\nvar inspect = inspector(9222, '127.0.0.1', 'about:blank', function () {\n    inspect.Page.enable(function (error) {\n        if (error) throw error;\n\n        inspect.Page.once('loadEventFired', function (response) {\n            \n            // window.onload emitted at this time `timestamp`:\n            console.log(new Date(response.timestamp));\n        });\n    });\n});\n```\n\n## Generating the Library & Documentation\n\nThe code and documentation is generated from the [WebKit repository](https://github.com/WebKit/webkit/)'s debugger protocol specification files.\n**NOTE:** it's probably a good idea to remove the old files in `doc/` and `lib/` before regenerating them.\nTo generate the code & docs, run:\n\n```sh\n$ npm run generate\n```\n\n## API documetation\n\n### inspect = inspector(port, host, href, [callback])\n\nTo connect a remote WebKit inspector you must first start the WebKit instance\nwith the remote debugger enabled. In Chrome this is done by adding the\n`--remote-debugging-port=9222` process argument.\n\nThe inspector module will then try to connect to `http://127.0.0.1:9222/json`\nif a connection coundn't be made within 2 seconds, it will emit and `error`\nevent.\n\nBesides from the remote `port` and `host` you will also need to spefic the `href`\nof the page that the inspector should connect to. Note that the page must already\nbe open, before the inspector module can connect to it.\n\nThe optional `callback` is executed once the `connect` event emits. It will\ntherefor only executeif a connection could be established successfully.\n\n```JavaScript\nvar inspector = require('inspector');\n\nvar inspect = inspector(9222, '127.0.0.1', 'about:blank', function () {\n    // connected\n});\n```\n\n### inspect.close([callback])\n\nWill close the WebSocket connection or stop the inspector from atempting to make\na connection.\n\nOnce everything is closed the `close` event will emit.\n\nThe optional `callback` is executed once the `close` event emits.\n\n```JavaScript\ninspect.close(function () {\n    // inspector closed\n});\n```\n\n### inspect[domain]\n\nThe WebKit Inspector is splited up intro subparts (called domains).\n\nAll WebKit Inspector domains are documented in the\n[doc](https://github.com/Admazely/inspector/blob/master/doc/README.md)\ndirectory.\n\n#### inspect\\[domain\\]\\[command\\]\\(parameters [...], callback\\)\n\nCommands are executed by by adding a `[command]` to the domain object, and then\ncall it by adding parameters and `callback` as descibed in the\n[documentation](https://github.com/Admazely/inspector/blob/master/doc/README.md).\n\nThe callback is executed with an `error` argument there is either `null` or an\n`Error` type. The second argument is a response object.\n\n_Note that not all commands returns a `response` object._\n\nExample where the document title is returned:\n\n```JavaScript\ninspect.Runtime.evaluate(\"document.title;\", function (error, response) {\n    if (error) throw error;\n\n    // contains the document title\n    console.log(response.result.value);\n});\n```\n\n#### inspect[domain].on(eventname, callback)\n\nThe WebKit Inspector emits a lot of events, all events are associated with a\n`domain` and are therefore only emitted on a `domain` object.\n\nThe event handler is only emitted with a single parameter, there is a object\ncontaining properties as described in the\n[documentation](https://github.com/Admazely/inspector/blob/master/doc/README.md).\n\nExample on how to listen on the `loadEventFired`, note that you must call\n`Page.enable()` first.\n\n```JavaScript\ninspect.Page.once('loadEventFired', function (response) {\n    \n    // window.onload emitted at this time `timestamp`:\n    console.log(new Date(response.timestamp));\n});\n```\n\n_Note: if the event isn't supported the inspector module will throw._\n\n### Event: connect\n\nEmitted once a connection is successfully established.\n\n### Event: close\n\nEmitted once all connections are closed. This is usually after `inspect.close()`\nis called, but if the server closed the connection this event will also emit.\n\nOnce the `close` event has emitted the `inspect.closed` flag becomes `true`.\n\n### Event: error\n\nEmiited in case any error occurred. Note if you don't listen to this event\nthe error will be thrown.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Admazely/inspector/issues"
  },
  "_id": "inspector@0.5.0",
  "dist": {
    "shasum": "7a6155f7bed6a3f5b9fc1407000ace2ea70e12fc"
  },
  "_from": "inspector@",
  "_resolved": "https://registry.npmjs.org/inspector/-/inspector-0.5.0.tgz"
}
